apply plugin: 'com.android.model.application'

// Root of 3rd party lib(s): location could be anywhere on the host system
def lib_distribution_root = '../distribution'
model {
    repositories {
        libs(PrebuiltLibraries) {
            // Configure one pre-built lib: shared
            gmath {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/gmath/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/gmath/lib/${targetPlatform.getName()}/libgmath.so")
                }
            }
            // Configure another pre-built lib: shared;[change to static after Studio supports]
            // static lib generation. USING static lib is supported NOW, for that case,
            // simple change:
            //  SharedLibaryBinary --> StaticLibraryBinary
            //  sharedLibraryFile  --> staticLibraryFile
            //  *.so --> *.a
            gperf {
                headers.srcDir "${lib_distribution_root}/gperf/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/gperf/lib/${targetPlatform.getName()}/libgperf.so")
                }
            }

            libboost_atomic {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_atomic-gcc-mt-1_53.a")
                }
            }

            libboost_chrono {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_chrono-gcc-mt-1_53.a")
                }
            }

            libboost_context {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_context-gcc-mt-1_53.a")
                }
            }


            libboost_date_time {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_date_time-gcc-mt-1_53.a")
                }
            }


            libboost_exception{
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_exception-gcc-mt-1_53.a")
                }
            }


            libboost_filesystem {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_filesystem-gcc-mt-1_53.a")
                }
            }


            libboost_graph {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_graph-gcc-mt-1_53.a")
                }
            }


            libboost_chrono {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_chrono-gcc-mt-1_53.a")
                }
            }


            libboost_iostreams {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_iostreams-gcc-mt-1_53.a")
                }
            }


            libboost_math_c99f {
                headers.srcDir "${lib_distribution_root}/boost"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_c99f-gcc-mt-1_53.a")
                }
            }


            libboost_math_c99 {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_c99-gcc-mt-1_53.a")
                }
            }


            libboost_math_c99l {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_c99l-gcc-mt-1_53.a")
                }
            }


            libboost_math_tr1f {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_tr1f-gcc-mt-1_53.a")
                }
            }


            libboost_math_tr1 {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_tr1-gcc-mt-1_53.a")
                }
            }


            libboost_math_tr1l {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_math_tr1l-gcc-mt-1_53.a")
                }
            }


            libboost_prg_exec_monitor {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_prg_exec_monitor-gcc-mt-1_53.a")
                }
            }


            libboost_program_options{
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_program_options-gcc-mt-1_53.a")
                }
            }


            libboost_random {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_random-gcc-mt-1_53.a")
                }
            }

            libboost_regex {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_regex-gcc-mt-1_53.a")
                }
            }

            libboost_serialization {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_serialization-gcc-mt-1_53.a")
                }
            }

            libboost_signals {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_signals-gcc-mt-1_53.a")
                }
            }

            libboost_system {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_system-gcc-mt-1_53.a")
                }
            }

            libboost_test_exec_monitor{
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_test_exec_monitor-gcc-mt-1_53.a")
                }
            }

            libboost_thread {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_thread-gcc-mt-1_53.a")
                }
            }

            libboost_timer {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_timer-gcc-mt-1_53.a")
                }
            }

            libboost_unit_test_framework{
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_unit_test_framework-gcc-mt-1_53.a")
                }
            }

            libboost_wave {
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_wave-gcc-mt-1_53.a")
                }
            }

            libboost_wserialization{
                headers.srcDir "${lib_distribution_root}/boost/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/lib/${targetPlatform.getName()}/libboost_wserialization-gcc-mt-1_53.a")
                }
            }

        }
    }
    android {
        compileSdkVersion = 23
        buildToolsVersion = '23.0.2'

        defaultConfig {
            applicationId = 'com.example.hellolibs'
            minSdkVersion.apiLevel = 13
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = 'hello-libs'
            toolchain = 'clang'
            stl = 'gnustl_static'
            cppFlags.addAll(['-std=c++11'])
            ldLibs.addAll(['android', 'log'])
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'x86'])
        }
        sources {
            main {
                jni {
                    dependencies {
                        library 'gmath' linkage 'shared'
                        // if gperf were *.a, change shared --> static
                        library 'gperf' linkage 'shared'
                        //library 'boost' linkage 'static'
                        library 'libboost_atomic' linkage 'static'
                        library 'libboost_chrono' linkage 'static'
                        library 'libboost_context' linkage 'static'
                        library 'libboost_date_time' linkage 'static'
                        library 'libboost_exception' linkage 'static'
                        library 'libboost_filesystem' linkage 'static'
                        library 'libboost_graph' linkage 'static'
                        library 'libboost_iostreams' linkage 'static'
                        library 'libboost_math_c99f' linkage 'static'
                        library 'libboost_math_c99l' linkage 'static'
                        library 'libboost_math_c99' linkage 'static'
                        library 'libboost_math_tr1f' linkage 'static'
                        library 'libboost_math_tr1' linkage 'static'
                        library 'libboost_math_tr1l' linkage 'static'
                        library 'libboost_prg_exec_monitor' linkage 'static'
                        library 'libboost_program_options' linkage 'static'
                        library 'libboost_random' linkage 'static'
                        library 'libboost_regex' linkage 'static'
                        library 'libboost_serialization' linkage 'static'
                        library 'libboost_signals' linkage 'static'
                        library 'libboost_system' linkage 'static'
                        library 'libboost_test_exec_monitor' linkage 'static'
                        library 'libboost_thread' linkage 'static'
                        library 'libboost_wave' linkage 'static'
                        library 'libboost_timer' linkage 'static'
                        library 'libboost_unit_test_framework' linkage 'static'
                        library 'libboost_wserialization' linkage 'static'
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "${lib_distribution_root}/gmath/lib"
                        srcDir "${lib_distribution_root}/gperf/lib"
                        srcDir "${lib_distribution_root}/boost/lib"
                    }
                }
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-android.txt'))
            }
        }
    }
}

dependencies {
    println rootProject.getName()
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.3.0'
}

//  Unnecessary dependency management:
//  Make sure the libs are available when begin compiling application project
//  This could be ignored because in real scenario, the pre-built libs are
//  already given to us before creating application.
tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':gmath:distributeLib'
        task.dependsOn ':gperf:distributeLib'
    }
}
